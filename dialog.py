import asyncio
import json
from datetime import datetime, date
import random
import openai
from aioredis import Redis
from settings import opanaikey
from loguru import logger

save_time_long = 60 * 60 * 2
redis = Redis(host='localhost', port=6379, db=6)


# https://dialogflow.cloud.google.com/#/editAgent/mtl-skynet-hldy/


async def save_to_redis(chat_id, msg, is_answer=False):
    data_name = f'{chat_id}:{round(datetime.now().timestamp())}'
    j = {"content": msg}
    if is_answer:
        j["role"] = "assistant"
    else:
        j["role"] = "user"
    await redis.set(data_name, json.dumps(j))
    await redis.expire(data_name, save_time_long)


async def load_from_redis(chat_id):
    keys = await redis.keys(f'{chat_id}:*')
    messages = []

    for key in keys:
        value = await redis.get(key)
        # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        message = json.loads(value)
        # –∏–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∫–ª—é—á–∞
        _, timestamp = key.decode().split(":")
        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π timestamp –≤ —Å–ø–∏—Å–æ–∫
        messages.append((float(timestamp), message))

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    messages.sort(key=lambda x: x[0])

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ timestamp
    return [msg for _, msg in messages]


async def delete_last_redis(chat_id):
    keys = await redis.keys(f'{chat_id}:*')

    if not keys:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    keys.sort(key=lambda key: float(key.decode().split(":")[1]))

    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ç.–µ. –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á)
    await redis.delete(keys[-1])



async def talk(chat_id, msg):
    await save_to_redis(chat_id, msg)
    msg_data = await load_from_redis(chat_id)
    msg = await talk_open_ai_async(msg_data=msg_data)
    if msg:
        await save_to_redis(chat_id, msg, is_answer=True)
        return msg
    else:
        await delete_last_redis(chat_id)
        return '=( connection error, retry again )='



async def talk_open_ai_async(msg=None, msg_data=None, user_name=None):
    openai.organization = "org-Iq64OmMI81NWnwcPtn72dc7E"
    openai.api_key = opanaikey
    # list models
    # models = openai.Model.list()

    if msg_data:
        messages = msg_data
    else:
        messages = [{"role": "user", "content": msg}]
        if user_name:
            messages[0]["name"] = user_name
    try:
        print('****', messages)
        chat_completion_resp = await openai.ChatCompletion.acreate(model="gpt-3.5-turbo", messages=messages)
        return chat_completion_resp.choices[0].message.content
    except openai.error.APIError as e:
        logger.info(e.code)
        logger.info(e.args)
        return None


async def talk_get_comment(chat_id, article):
    messages = [{"role": "system",
                 "content": "–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ç–∞—Ç—å–µ, —Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –ª–∏–±–µ—Ä—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–∞. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ. –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ä–∞–∑—É, –±–µ–∑ –≤–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏ # –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö !"},
                {"role": "user", "content": article}]
    await save_to_redis(chat_id, article)
    msg = await talk_open_ai_async(msg_data=messages)
    if msg:
        await save_to_redis(chat_id, msg, is_answer=True)
        return msg
    else:
        await delete_last_redis(chat_id)
        return '=( connection error, retry again )='



gor = (
    ("–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"),
    ("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ ", "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç ", "–ú–∞—Ä—Å ", "–í–µ–Ω–µ—Ä–∞ ", "–õ—É–Ω–∞ ", "–ú–ª–µ—á–Ω—ã–π –ø—É—Ç—å ", "–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∞ ",
     "–Æ–ø–∏—Ç–µ—Ä ", "–ü–ª—É—Ç–æ–Ω ", "–°–∞—Ç—É—Ä–Ω ",),
    ("–≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º ", "—Å–æ–≤–µ—Ç—É–µ—Ç –≤–∞–º ", "–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º ", "–ø—Ä–µ–¥—Ä–µ–∫–∞–µ—Ç –≤–∞–º ", "–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç –≤–∞—Å ", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞–º ",
     "–æ—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞–º ", "–Ω–∞–º–µ–∫–∞–µ—Ç –≤–∞–º ", "—Ç—Ä–µ–±—É–µ—Ç –æ—Ç –≤–∞—Å ",),
    ("–≤—ã–ø–∏—Ç—å –ø–∏–≤–∞", "–Ω–∞–ø–∏—Ç—å—Å—è –≤ —Ö–ª–∞–º", "–≤—ã–ø–∏—Ç—å –Ω–∏–∫—à–µ—á–∫–æ", "–≤—ã–ø–∏—Ç—å –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∏–∫—à–µ—á–∫–æ", "–≤—ã–ø–∏—Ç—å —Ç–µ–º–Ω–æ–≥–æ –Ω–∏–∫—à–µ—á–∫–æ",
     "–≤—ã–ø—ã—Ç—å —Ö—É–≥–∞—Ä–¥–µ–Ω–∞", "—Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–∏—Ç—å =(", "—Ö–æ—Ä–æ—à–æ –ø—Ä–∏–≥–ª—è–¥—ã–≤–∞—Ç—å –∑–∞ –æ—Ä–µ—à–∫–∞–º–∏", "–≤—ã–ø–∏—Ç—å —á–µ–≥–æ –ø–æ –∫—Ä–µ–ø—á–µ",
     "–ø–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è —Å —Ö–æ—Ä–æ—à–µ–π –∑–∞–∫—É—Å–∫–æ–π", "–ø–æ–±–µ—Ä–µ—á—å –ø–µ—á–µ–Ω—å", "–Ω–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—á–µ–Ω—å", "–≤—ã–ø–∏—Ç—å —Ä–∞–∫–∏–∏", "–≤—ã–ø–∏—Ç—å –¥—É–Ω—å–∫–∏",
     "–≤—ã–ø–∏—Ç—å –ª–æ–∑—ã", "–≤—ã–ø–∏—Ç—å –∫–∞—Å–ø–∏–∏", "—Å–æ–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ —Ç—Ä–æ–∏—Ö",)
)

lang_dict = {}


def get_horoscope() -> list:
    if date.today() == lang_dict.get('horoscope_date'):
        return lang_dict.get('horoscope', ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ =('])
    else:
        today_dic = [""]
        s3 = ""
        lang_dict['horoscope_date'] = date.today()
        horoscope = ["–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"]
        for s in gor[0]:
            horoscope.append(f'**{s}**')
            while s3 in today_dic:
                s3 = random.choice(gor[3])
            today_dic.append(s3)

            g = (random.choice(gor[1]) + random.choice(gor[2]) + s3)
            while g in horoscope:
                g = (random.choice(gor[1]) + random.choice(gor[2]) + s3)
            horoscope.append(g)

        horoscope.append("")
        horoscope.append("–ñ–µ–ª–∞—é –≤—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üç∫üç∫üç∫")
        lang_dict['horoscope'] = horoscope
        return horoscope


# messages array Required

# A list of messages describing the conversation so far.

# role string Required
# The role of the author of this message. One of system, user, or assistant.

# content string Required
# The contents of the message.

# name string Optional
# The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.

if __name__ == "__main__":
    article  = '''*'''
    print(asyncio.run(talk_get_comment(1, article)))
    pass
    # print(talk(9, '–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –º–∞—Ä—Å ?'))
    # print(asyncio.run(talk_open_ai_async('–ü—Ä–∏–≤–µ—Ç, –∑–∞–ø–æ–º–Ω–∏, —Ç–µ–±—è –∑–æ–≤—É—Ç —Å–∫–∞–π–Ω–µ—Ç.')))
    # print(asyncio.run(talk_open_ai_async('–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º, –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ç–µ–±—è –∑–æ–≤—É—Ç –°–∫–∞–π–Ω–µ—Ç, —Ç—ã –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–ª–∞–¥–æ—Å—Ç–µ–π.')))

    # print(asyncio.run(talk(58, '–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º, –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ç–µ–±—è –∑–æ–≤—É—Ç –°–∫–∞–π–Ω–µ—Ç, —Ç—ã –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–ª–∞–¥–æ—Å—Ç–µ–π.')))
    # print(asyncio.run(talk(58, '–Ø —Ç–µ–±–µ –¥–∞–≤–∞–ª –∏–º—è, –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç ?')))
    # print(asyncio.run(talk(58, '–í–∑–≤–µ—Å—Ç–µ –º–Ω–µ 500 –≥—Ä–∞–º–º ')))
