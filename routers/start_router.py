from aiogram import Router, Bot, F
import re # Add re import for regex operations
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReactionTypeEmoji
from loguru import logger
from sqlalchemy.orm import Session

from db.requests import db_save_bot_user
from other.global_data import MTLChats, update_command_info
from other.stellar_tools import MTLAddresses

router = Router()

startmsg = """
–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–∑ <a href="https://montelibero.org">–ú–æ–Ω—Ç–µ–ª–∏–±–µ—Ä–æ</a>.
–ü–æ–º–æ–≥–∞—é —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∑–∞–¥–∞—á–∞–º–∏, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è.
–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–±–µ—Ä–∏—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ @mymtlbot –∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
"""

link_stellar = "https://stellar.expert/explorer/public/account/"
link_json = "https://raw.githubusercontent.com/montelibero-org/mtl/main/json/"

links_msg = f"""
–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

[–û—Ç—á–µ—Ç –ø–æ —Ñ–æ–Ω–¥—É](https://docs.google.com/spreadsheets/d/1fTOWq7JqX24YEqhCZTQ-z8IICPpgBHXcj91moxkT6R4/edit#gid=1372993507)
[–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤](https://docs.google.com/spreadsheets/d/1x3E1ai_kPVMQ85nuGwuTq1bXD051fnVlf0Dz9NaFoq0)
–¢—É–ª–∑—ã [–¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è](mtl.ergvein.net/) / [—Ä–∞—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –∏ –¥–∏–≤–æ–≤](https://ncrashed.github.io/dividend-tools/votes/)
[–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è](https://laboratory.stellar.org/#?network=public)
–°—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã —Ñ–æ–Ω–¥–∞ / [–≠–º–∏—Ç–µ–Ω—Ç]({link_stellar}{MTLAddresses.public_issuer}) /  [–ó–∞–ª–æ–≥–æ–≤—ã–π —Å—á–µ—Ç]({link_stellar}{MTLAddresses.public_pawnshop})
–°—Ç–∞–∫–∞–Ω –Ω–∞ [–º—É–ª—å–∫–∏](https://stellar.expert/explorer/public/market/EURMTL-GACKTN5DAZGWXRWB2WLM6OPBDHAMT6SJNGLJZPQMEZBUR4JUGBX2UK7V/XLM) [mtl](https://stellar.expert/explorer/public/market/EURMTL-GACKTN5DAZGWXRWB2WLM6OPBDHAMT6SJNGLJZPQMEZBUR4JUGBX2UK7V/MTL-GACKTN5DAZGWXRWB2WLM6OPBDHAMT6SJNGLJZPQMEZBUR4JUGBX2UK7V)
–°–ø–∏—Å–∫–∏ [—á–µ—Ä–Ω—ã–π]({link_json}blacklist.json) / [BL for DG]({link_json}dg_blacklist.json) 
–ë–æ—Ç—ã [–û–±–º–µ–Ω eurmtl_xlm]({link_stellar}{MTLAddresses.public_exchange_eurmtl_xlm}) / \
[–û–±–º–µ–Ω eurmtl_usdc]({link_stellar}{MTLAddresses.public_exchange_eurmtl_usdm}) / \
[–û–±–º–µ–Ω usdm_sats]({link_stellar}{MTLAddresses.public_exchange_usdm_sats}) / \
[–û–±–º–µ–Ω usdm_mtlfarm]({link_stellar}{MTLAddresses.public_exchange_usdm_mtlfarm}) / \
[–î–∏–≤–∏–¥–µ–Ω–¥—ã]({link_stellar}GDNHQWZRZDZZBARNOH6VFFXMN6LBUNZTZHOKBUT7GREOWBTZI4FGS7IQ/) / \
[BIM-XLM]({link_stellar}GARUNHJH3U5LCO573JSZU4IOBEVQL6OJAAPISN4JKBG2IYUGLLVPX5OH) / \
[BIM-EURMTL]({link_stellar}GDEK5KGFA3WCG3F2MLSXFGLR4T4M6W6BMGWY6FBDSDQM6HXFMRSTEWBW) / \
[Wallet]({link_stellar}GB72L53HPZ2MNZQY4XEXULRD6AHYLK4CO55YTOBZUEORW2ZTSOEQ4MTL) / \
[–ë–æ—Ç —Å–∂–∏–≥–∞–Ω–∏—è]({link_stellar}GD44EAUQXNUVBJACZMW6GPT2GZ7I26EDQCU5HGKUTVEQTXIDEVGUFIRE) 
–í–∏–¥–µ–æ [–ö–∞–∫ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å](https://t.me/MTL_production/26) / [–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å](https://t.me/MTL_production/27) / [–ö–∞–∫ —Å–∫–ª–µ–∏—Ç—å\—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏](https://t.me/MTL_production/28)
"""


@update_command_info("/start", "–Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
@router.message(CommandStart(deep_link=False, magic=F.args.is_(None)), F.chat.type == "private")
async def cmd_start(message: Message, state: FSMContext, session: Session, bot: Bot):
    await state.clear()
    db_save_bot_user(session, message.from_user.id, message.from_user.username)
    await message.reply(startmsg)


ALL_EMOJI = """üëç üëé ‚ù§ üî• ü•∞ üëè üòÅ ü§î ü§Ø üò± ü§¨ üò¢ üéâ ü§© ü§Æ üí© üôè üëå üïä ü§° ü•± ü•¥ üòç üê≥ ‚ù§‚Äçüî• üåö üå≠ üíØ ü§£ ‚ö° üçå üèÜ üíî 
               ü§® üòê üçì üçæ üíã üñï üòà üò¥ üò≠ ü§ì üëª üë®‚Äçüíª üëÄ üéÉ üôà üòá üò® ü§ù ‚úç ü§ó ü´° üéÖ üéÑ ‚òÉ üíÖ ü§™ üóø üÜí üíò üôâ ü¶Ñ üòò üíä 
               üôä üòé üëæ ü§∑‚Äç‚ôÇ ü§∑ ü§∑‚Äç‚ôÄ üò°""".split()


@router.message(Command("emoji"), F.chat.type == "private")
async def cmd_emoji(message: Message, state: FSMContext, session: Session, bot: Bot):
    args = message.text.split()[1:]

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /emoji [all | URL | URL emoji]")
        return

    if args[0] == "all":
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ–¥–∑–∏:\n{' '.join(ALL_EMOJI)}")
    elif args[0].startswith("https://t.me/"):
        chat_id, message_id = map(int, args[0].split('/')[-2:])
        emoji = args[1] if len(args) > 1 and args[1] in ALL_EMOJI else "üëÄ"
        await bot.set_message_reaction(
            chat_id=f"-100{chat_id}",
            message_id=message_id,
            reaction=[ReactionTypeEmoji(emoji=emoji)]
        )
        await message.answer(f"–†–µ–∞–∫—Ü–∏—è {emoji} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command(commands=["save"]))
async def cmd_save(message: Message):
    logger.info(f'{message.model_dump_json(indent=2)}')
    if message.from_user.id == MTLChats.ITolstov:
        await message.answer("–ì–æ—Ç–æ–≤–æ")
    else:
        await message.answer('Saved')


@update_command_info("/links", "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
@router.message(Command(commands=["links"]))
async def cmd_links(message: Message):
    await message.answer(links_msg, parse_mode=ParseMode.MARKDOWN)


@update_command_info("/show_id", "–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞")
@router.message(Command(commands=["show_id"]))
async def cmd_show_id(message: Message):
    await message.answer(f"chat_id = {message.chat.id} message_thread_id = {message.message_thread_id} " +
                         f"is_topic_message  = {message.is_topic_message}")


@router.message(Command(commands=["me"]))
async def cmd_me(message: Message, bot: Bot):
    msg = ' '.join(message.text.split(' ')[1:])
    msg = f'<i><b>{message.from_user.username}</b> {msg}</i>'
    await bot.send_message(chat_id=message.chat.id, text=msg, parse_mode=ParseMode.HTML,
                           reply_to_message_id=message.reply_to_message.message_id if message.reply_to_message else None,
                           message_thread_id=None if message.reply_to_message else message.message_thread_id)
    try:
        await message.delete()
    except:
        pass

@update_command_info("/link", "–ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ Stellar –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
@router.message(Command(commands=["link"]))
async def cmd_link(message: Message, bot: Bot):
    # Check if the command is a reply to a message
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    replied_message_text = message.reply_to_message.html_text
    if not replied_message_text:
        await message.reply("–í —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏, –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤.")
        return

    # Find Stellar addresses (56 characters, starting with G)
    stellar_addresses = re.findall(r'\b(G[A-Z0-9]{55})\b', replied_message_text)

    if not stellar_addresses:
        await message.reply("Stellar –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    # Remove duplicates and sort to ensure consistent order
    unique_stellar_addresses = sorted(list(set(stellar_addresses)))

    response_parts = []
    for address in unique_stellar_addresses:
        short_address = f"{address[:4]}..{address[-4:]}"
        stellar_expert_link = f"https://stellar.expert/explorer/public/account/{address}"
        bsn_expert_link = f"https://bsn.expert/accounts/{address}"
        response_parts.append(
            f'{short_address} <a href="{stellar_expert_link}">stellar.expert</a>  '
            f'<a href="{bsn_expert_link}">bsn.expert</a>'
        )
    if response_parts:
        full_response = "\n\n".join(response_parts)
        await message.reply(
            full_response,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    else:
        # This case should ideally not be reached if stellar_addresses is not empty,
        # but as a fallback.
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.")

def register_handlers(dp, bot):
    dp.include_router(router)
    logger.info('router start_router was loaded')

register_handlers.priority = 10